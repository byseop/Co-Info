{"version":3,"sources":["components/CoInfo.js","components/CoInfoContainer.js","components/CurrnetPrice.js","components/Coin.js","components/CoinList.js","components/CoinListContainer.js","components/List.js","components/ListContainer.js","App.js","serviceWorker.js","stores/marketStore.js","stores/API_QUERY.js","index.js","stores/index.js"],"names":["CoInfo","_ref","chart","list","react_default","a","createElement","className","CoInfoContainer","inject","observer","getMarketCode","this","props","marketStore","components_CoInfo","Component","CurrnetPrice","beforePrice","changeStyle","border","nextProps","nextState","price","_this$props","market","console","log","concat","Coin","tick","change","changePrice","changeRate","isChange","prevProps","prevState","snapshot","tickPrice","currentPrice","length","coinInfoArr","find","info","undefined","trade_price","change_price","change_rate","toLocaleString","toFixed","_this$props2","korean_name","CurrnetPrice_CurrnetPrice","defaultProps","CoinList","selectedMarketCode","refreshingCurrentPrice","map","coin","Coin_Coin","Object","assign","key","english_name","CoinListContainer","renderCoinList","arguments","_this","components_CoinList","setInterval","Fragment","List","selectedMarket","marketSelect","handleClick","e","target","id","onClick","src_components_CoinListContainer","_ref2","components_List","App","src_components_CoInfoContainer","components_ListContainer","Boolean","window","location","hostname","match","configure","enforceActions","root","classCallCheck","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","flow","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","axios","get","sent","classify","isLoadedMarketCode","t0","stop","bind","_descriptor6","_descriptor7","_descriptor8","_descriptor9","allMarket","classifyKrw","classifyBtc","classifyEth","classifyUsdt","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","callCurrentPrice","_callee2","_context2","isLoadCurrentPrice","callTickerLink","_descriptor16","observable","action","_this2","krwMarket","filter","split","_this3","btcMarket","_this4","ethMarket","_this5","usdtMarket","code","_this6","i","substr","_this7","RootStore","ReactDOM","render","index_module","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bf28bed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CoInfo = ({ chart, list }) => {\r\n  return (\r\n    <div className=\"CoInfo\">\r\n      <div className=\"inner\">\r\n        <div className=\"Chart\">{chart}</div>\r\n        <div className=\"List\">{list}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoInfo;\r\n","import React, { Component } from 'react';\r\nimport CoInfo from './CoInfo';\r\nimport { observer, inject } from 'mobx-react';\r\nimport './CoInfoContainer.css';\r\n\r\n@inject('marketStore')\r\n@observer\r\nclass CoInfoContainer extends Component {\r\n  componentDidMount() {\r\n    const { getMarketCode } = this.props.marketStore;\r\n    getMarketCode();\r\n  }\r\n\r\n  render() {\r\n    const { list } = this.props;\r\n    return <CoInfo chart={null} list={list} />;\r\n  }\r\n}\r\n\r\nexport default CoInfoContainer;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class CurrnetPrice extends Component {\r\n  beforePrice = 0;\r\n  changeStyle={\r\n    'border': '1px solid #000'\r\n  };\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    const { price } = this.props;\r\n    // console.log('현재값: '+price)\r\n    // console.log('비교값: '+nextProps.price)\r\n    if (nextProps.price === price) {\r\n      this.beforePrice = price;\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  render() {\r\n    const { price, market } = this.props;\r\n    console.log(`Refreshing ${market} price, ${this.beforePrice} -> ${price}`);\r\n    return <span className=\"tick_price\">{price}</span>\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport CurrentPrice from './CurrnetPrice';\r\n\r\nexport default class Coin extends Component {\r\n  tick = 0;\r\n  change;\r\n  changePrice;\r\n  changeRate;\r\n  isChange = false; // 이걸로 수정해야됨\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    const { market, tickPrice, currentPrice } = this.props;\r\n    \r\n    if (prevProps.currentPrice !== currentPrice && prevProps.tickPrice !== tickPrice && currentPrice.length === tickPrice.length) {\r\n      // console.log(prevProps.currentPrice)\r\n      if (currentPrice.length > 0 && tickPrice.length > 0 && currentPrice === tickPrice) {\r\n        const coinInfoArr = tickPrice.find(info => (\r\n          info.market === market\r\n        ));\r\n        // console.log(coinInfoArr);\r\n        if (coinInfoArr !== undefined) {\r\n\r\n          const { trade_price, change, change_price, change_rate } = coinInfoArr;\r\n          if (trade_price > 1) {\r\n            this.tick = trade_price.toLocaleString();\r\n          } else {\r\n            this.tick = trade_price.toFixed(4);\r\n          }\r\n          if (change === 'RISE' || change === 'EVEN') {\r\n            this.changePrice = '+'+change_price;\r\n            this.changeRate = '+'+(change_rate*100).toFixed(2)\r\n          } else if (change === 'FALL') {\r\n            this.changePrice = -change_price;\r\n            this.changeRate = -(change_rate*100).toFixed(2)\r\n          }\r\n          this.change = change;\r\n        }\r\n      } else {\r\n        this.tick = this.tick;\r\n        this.change = this.change\r\n        this.changePrice = this.changePrice;\r\n      }\r\n    } \r\n  }\r\n  render() {\r\n    const { korean_name, market } = this.props;\r\n    return (\r\n      <div className=\"c_list\">\r\n        <div>\r\n          <div className=\"korean_name\">{korean_name}</div>\r\n          <div className=\"market_name\">{market}</div>\r\n        </div>\r\n        <div className=\"tick\"><CurrentPrice price={this.tick} market={market} /></div>\r\n        <div className=\"change\">\r\n          <span className={`change_price ${this.change} ${this.isChange === true ? 'changed' : null}`}>\r\n            {this.changePrice} ({this.changeRate}%)\r\n            {`\r\n              ${this.change === 'RISE' ? '▲' : ''}\r\n              ${this.change === 'FALL' ? '▼' : ''}\r\n            `}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nCoin.defaultProps = {\r\n  korean_name: 'Coin Name',\r\n  market: 'Market',\r\n  price: 'Price'\r\n}\r\n","import React from 'react';\r\nimport Coin from './Coin';\r\n\r\nconst CoinList = ({ selectedMarketCode, tickPrice, currentPrice, refreshingCurrentPrice }) => {\r\n  const list = selectedMarketCode.map(coin => {\r\n    return <Coin key={coin.english_name} {...coin} tickPrice={tickPrice} currentPrice={currentPrice} />\r\n  })\r\n  \r\n  return (\r\n    <div className=\"coin_list_inner\">{list}</div>\r\n  );\r\n};\r\n\r\nexport default CoinList;\r\n","import React, { Component } from 'react'\r\nimport CoinList from './CoinList';\r\nimport './CoinListContainer.css';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\n\r\n@inject('marketStore')\r\n@observer\r\nclass CoinListContainer extends Component {\r\n  componentDidMount() {\r\n    const { refreshingCurrentPrice } = this.props.marketStore;\r\n    setInterval(function() {\r\n      refreshingCurrentPrice(); // 실시간시세 업데이트\r\n    }, 400)\r\n  }\r\n  renderCoinList = ({ selectedMarketCode, currentPrice, tickPrice } = this.props.marketStore) => {\r\n    return <CoinList selectedMarketCode={selectedMarketCode} currentPrice={currentPrice} tickPrice={tickPrice} />\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"title\">실시간 시세</div>\r\n        {this.renderCoinList()}\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default CoinListContainer;","import React from 'react';\r\nimport CoinListContainer from './CoinListContainer';\r\n\r\nconst List = ({ selectedMarket, marketSelect }) => {\r\n  const handleClick = (e) => {\r\n    marketSelect(e.target.id);\r\n  }\r\n  return (\r\n    <>\r\n      <div className='type'>\r\n        <div className={`type_list ${selectedMarket === 'KRW' ? 'on' : ''}`}><h3 id='KRW' onClick={handleClick}>원화거래</h3></div>\r\n        <div className={`type_list ${selectedMarket === 'BTC' ? 'on' : ''}`}><h3 id='BTC' onClick={handleClick}>BTC</h3></div>\r\n        <div className={`type_list ${selectedMarket === 'ETH' ? 'on' : ''}`}><h3 id='ETH' onClick={handleClick}>ETH</h3></div>\r\n        <div className={`type_list ${selectedMarket === 'USDT' ? 'on' : ''}`}><h3 id='USDT' onClick={handleClick}>USDT</h3></div>\r\n      </div>\r\n      <div className='Coin_List'>\r\n        <CoinListContainer />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport List from './List';\r\nimport { observer, inject } from 'mobx-react';\r\nimport './ListContainer.css';\r\n\r\nconst ListConatiner = ({ selectedMarket, marketSelect }) => {\r\n  return <List selectedMarket={selectedMarket} marketSelect={marketSelect} />;\r\n};\r\n\r\nexport default inject(({ marketStore }) => ({\r\n  selectedMarket: marketStore.selectedMarket,\r\n  marketSelect: marketStore.marketSelect,\r\n}))(observer(ListConatiner));\r\n","import React, { Component } from 'react';\nimport CoInfoContainer from './components/CoInfoContainer';\nimport ListContainer from './components/ListContainer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return <CoInfoContainer chart={null} list={<ListContainer />} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, flow, configure, action } from 'mobx';\r\nimport axios from 'axios';\r\nimport { MARKET_CODE_URL } from './API_QUERY';\r\n\r\nconfigure({ enforceActions: 'observed' });\r\n\r\nexport default class marketStore {\r\n  constructor(root) {\r\n    this.root = root;\r\n  }\r\n\r\n  // 최초 페이지 로드시 마켓코드 동기화\r\n  @observable isLoadedMarketCode = 'pending';\r\n  @observable krwMarket = [];\r\n  @observable btcMarket = [];\r\n  @observable ethMarket = [];\r\n  @observable usdtMarket = [];\r\n  \r\n  getMarketCode = flow(function*() {\r\n    try {\r\n      const response = yield axios.get(MARKET_CODE_URL);\r\n      const data = response.data;\r\n      this.classify(data);\r\n      yield this.marketSelect('KRW');\r\n      this.isLoadedMarketCode = 'done';\r\n    }\r\n    catch (error) {\r\n      this.isLoadedMarketCode = 'error';\r\n    }\r\n  });\r\n  getMarketCode = this.getMarketCode.bind(this);\r\n\r\n  @action classifyKrw = allMarket => {\r\n    this.krwMarket = allMarket.filter(list => (\r\n      list.market.split('-')[0] === 'KRW'\r\n    ));\r\n  }\r\n  @action classifyBtc = allMarket => {\r\n    this.btcMarket = allMarket.filter(list => (\r\n      list.market.split('-')[0] === 'BTC'\r\n    ));\r\n  }\r\n  @action classifyEth = allMarket => {\r\n    this.ethMarket = allMarket.filter(list => (\r\n      list.market.split('-')[0] === 'ETH'\r\n    ));\r\n  }\r\n  @action classifyUsdt = allMarket => {\r\n    this.usdtMarket = allMarket.filter(list => (\r\n      list.market.split('-')[0] === 'USDT'\r\n    ));\r\n  }\r\n  classify = allMarket => {\r\n    this.classifyKrw(allMarket);\r\n    this.classifyBtc(allMarket);\r\n    this.classifyEth(allMarket);\r\n    this.classifyUsdt(allMarket);\r\n  }\r\n\r\n  // 마켓 탭\r\n  @observable selectedMarket = 'KRW'; // KRW, BTC, ETH, USDT\r\n  @observable selectedMarketCode = [];\r\n  @observable callTickerLink = 'https://api.upbit.com/v1/ticker?markets=';\r\n  @action marketSelect = code => {\r\n    if (code === 'KRW') {\r\n      this.selectedMarket = 'KRW'\r\n      this.selectedMarketCode = this.krwMarket;\r\n    }\r\n    else if (code === 'BTC') {\r\n      this.selectedMarket = 'BTC'\r\n      this.selectedMarketCode = this.btcMarket;\r\n    }\r\n    else if (code === 'ETH') {\r\n      this.selectedMarket = 'ETH'\r\n      this.selectedMarketCode = this.ethMarket;\r\n    }\r\n    else if (code === 'USDT') {\r\n      this.selectedMarket = 'USDT'\r\n      this.selectedMarketCode = this.usdtMarket;\r\n    }\r\n\r\n    this.callTickerLink = 'https://api.upbit.com/v1/ticker?markets=';\r\n\r\n    for (let i = 0; i < this.selectedMarketCode.length; i++) {\r\n      this.callTickerLink = this.callTickerLink + this.selectedMarketCode[i].market + ',';\r\n    }\r\n\r\n    this.callTickerLink = this.callTickerLink.substr(0, this.callTickerLink.length-1);\r\n    this.callCurrentPrice();\r\n  }\r\n\r\n  // 실시간 가격 정보\r\n  @observable currentPrice = [];\r\n  @observable isLoadCurrentPrice = 'pending';\r\n  tickPrice = [];\r\n  callCurrentPrice = flow(function*() {\r\n    this.tickPrice = [];\r\n    this.currentPrice = [];\r\n    this.isLoadCurrentPrice = 'pending';\r\n    try {\r\n      const response = yield axios(this.callTickerLink);\r\n      const data = yield response.data;\r\n      this.currentPrice = data;\r\n      this.tickPrice = this.currentPrice;\r\n      this.isLoadCurrentPrice = 'done';\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.isLoadCurrentPrice = 'error';\r\n    }\r\n  });\r\n  callCurrentPrice = this.callCurrentPrice.bind(this);\r\n\r\n  // 실시간 업데이트\r\n  @action refreshingCurrentPrice = () => {\r\n    if (this.isLoadCurrentPrice === 'done') {\r\n      this.callCurrentPrice();\r\n    }\r\n  }\r\n}\r\n","// 마켓코드\r\nexport const MARKET_CODE_URL = 'https://api.upbit.com/v1/market/all';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport RootStore from '././stores';\n\nconst root = new RootStore();\n\nReactDOM.render(\n    <Provider {...root}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import marketStore from './marketStore';\r\n\r\nclass RootStore {\r\n  constructor() {\r\n    this.marketStore = new marketStore(this);\r\n  }\r\n}\r\n\r\nexport default RootStore;\r\n"],"sourceRoot":""}