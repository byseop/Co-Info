{"version":3,"sources":["components/CoInfo.js","components/CoInfoContainer.js","components/CurrnetPrice.js","components/Coin.js","components/CoinList.js","components/CoinListContainer.js","components/List.js","components/ListContainer.js","App.js","serviceWorker.js","stores/marketStore.js","stores/API_QUERY.js","index.js","stores/index.js"],"names":["CoInfo","_ref","chart","list","react_default","a","createElement","className","CoInfoContainer","inject","observer","getMarketCode","this","props","marketStore","components_CoInfo","Component","CurrnetPrice","beforePrice","nextProps","nextState","price","_this$props","market","console","log","concat","Coin","tick","change","changePrice","changeRate","prevProps","prevState","snapshot","tickPrice","currentPrice","length","find","info","trade_price","changeMark","cPrice","change_price","cRate","change_rate","toLocaleString","toFixed","_this$props2","korean_name","CurrnetPrice_CurrnetPrice","defaultProps","CoinList","selectedMarketCode","refreshingCurrentPrice","map","coin","Coin_Coin","Object","assign","key","english_name","CoinListContainer","setInterval","_this$props$marketSto","Fragment","components_CoinList","List","selectedMarket","marketSelect","handleClick","e","target","id","onClick","src_components_CoinListContainer","_ref2","components_List","App","src_components_CoInfoContainer","components_ListContainer","Boolean","window","location","hostname","match","configure","enforceActions","root","_this","classCallCheck","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","flow","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","axios","get","sent","classify","isLoadedMarketCode","t0","stop","bind","_descriptor6","_descriptor7","_descriptor8","_descriptor9","allMarket","classifyKrw","classifyBtc","classifyEth","classifyUsdt","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","callCurrentPrice","_callee2","_context2","isLoadCurrentPrice","callTickerLink","_descriptor17","observable","action","_this2","krwMarket","filter","split","_this3","btcMarket","_this4","ethMarket","_this5","usdtMarket","code","_this6","i","substr","_this7","RootStore","ReactDOM","render","index_module","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3fb1fd99.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CoInfo = ({ chart, list }) => {\r\n  return (\r\n    <div className=\"CoInfo\">\r\n      <div className=\"inner\">\r\n        <div className=\"Chart\">{chart}</div>\r\n        <div className=\"List\">{list}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoInfo;\r\n","import React, { Component } from 'react';\r\nimport CoInfo from './CoInfo';\r\nimport { observer, inject } from 'mobx-react';\r\nimport './CoInfoContainer.css';\r\n\r\n@inject('marketStore')\r\n@observer\r\nclass CoInfoContainer extends Component {\r\n  componentDidMount() {\r\n    const { getMarketCode } = this.props.marketStore;\r\n    getMarketCode();\r\n  }\r\n\r\n  render() {\r\n    const { list } = this.props;\r\n    return <CoInfo chart={null} list={list} />;\r\n  }\r\n}\r\n\r\nexport default CoInfoContainer;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class CurrnetPrice extends Component {\r\n  beforePrice;\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    const { price } = this.props;\r\n    // console.log('현재값: '+price)\r\n    // console.log('비교값: '+nextProps.price)\r\n    if (nextProps.price === price) {\r\n      this.beforePrice = price;\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  render() {\r\n    const { price, market } = this.props;\r\n    console.log(`Refreshing ${market} price, ${this.beforePrice} -> ${price}`);\r\n    return <span className=\"tick_price\">{price}</span>\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport CurrentPrice from './CurrnetPrice';\r\n\r\nexport default class Coin extends Component {\r\n  tick;\r\n  change;\r\n  changePrice;\r\n  changeRate;\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    const { market, tickPrice, currentPrice } = this.props;\r\n    if (prevProps !== currentPrice) {\r\n      if (currentPrice.length > 0) {\r\n        const price = tickPrice.find(info => (\r\n          info.market === market\r\n        )).trade_price;\r\n        const changeMark = tickPrice.find(info => (\r\n          info.market === market\r\n        )).change;\r\n        const cPrice = tickPrice.find(info => (\r\n          info.market === market\r\n        )).change_price;\r\n        const cRate = tickPrice.find(info => (\r\n          info.market === market\r\n        )).change_rate;\r\n        // console.log(price);\r\n        if (price > 1) {\r\n          this.tick = price.toLocaleString();\r\n          if (changeMark === 'RISE' || changeMark === 'EVEN') {\r\n            this.changePrice = '+'+cPrice.toLocaleString();\r\n            this.changeRate = '+'+(cRate*100).toFixed(2)\r\n          } else if (changeMark === 'FALL') {\r\n            this.changePrice = -cPrice.toLocaleString();\r\n            this.changeRate = -(cRate*100).toFixed(2)\r\n          }\r\n        } else {\r\n          this.tick = price;\r\n          if (changeMark === 'RISE' || changeMark === 'EVEN') {\r\n            this.changePrice = '+'+cPrice;\r\n            this.changeRate = '+'+(cRate*100).toFixed(2)\r\n          } else if (changeMark === 'FALL') {\r\n            this.changePrice = -cPrice;\r\n            this.changeRate = -(cRate*100).toFixed(2)\r\n          }\r\n        }\r\n        this.change = changeMark;\r\n      } else {\r\n        this.tick = this.tick;\r\n        this.change = this.change\r\n        this.changePrice = this.changePrice;\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { korean_name, market } = this.props;\r\n    return (\r\n      <div className=\"c_list\">\r\n        <div>\r\n          <div className=\"korean_name\">{korean_name}</div>\r\n          <div className=\"market_name\">{market}</div>\r\n        </div>\r\n        <div className=\"tick\"><CurrentPrice price={this.tick} market={market} /></div>\r\n        <div className=\"change\">\r\n          <span className={`change_price ${this.change}`}>\r\n            {this.changePrice} ({this.changeRate}%)\r\n            {`\r\n              ${this.change === 'RISE' ? '▲' : ''}\r\n              ${this.change === 'FALL' ? '▼' : ''}\r\n            `}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nCoin.defaultProps = {\r\n  korean_name: 'Coin Name',\r\n  market: 'Market',\r\n  price: 'Price'\r\n}\r\n","import React from 'react';\r\nimport Coin from './Coin';\r\n\r\nconst CoinList = ({ selectedMarketCode, tickPrice, currentPrice, refreshingCurrentPrice }) => {\r\n  const list = selectedMarketCode.map(coin => {\r\n    return <Coin key={coin.english_name} {...coin} tickPrice={tickPrice} currentPrice={currentPrice} refreshingCurrentPrice={refreshingCurrentPrice} />\r\n  })\r\n  \r\n  return (\r\n    <div className=\"coin_list_inner\">{list}</div>\r\n  );\r\n};\r\n\r\nexport default CoinList;\r\n","import React, { Component } from 'react'\r\nimport CoinList from './CoinList';\r\nimport './CoinListContainer.css';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\n\r\n@inject('marketStore')\r\n@observer\r\nclass CoinListContainer extends Component {\r\n  componentDidMount() {\r\n    const { refreshingCurrentPrice } = this.props.marketStore;\r\n    setInterval(function() {\r\n      refreshingCurrentPrice(); // 실시간시세 업데이트\r\n    }, 200)\r\n  }\r\n  render() {\r\n    const { selectedMarketCode, currentPrice, tickPrice } = this.props.marketStore;\r\n    return (\r\n      <>\r\n        <div className=\"title\">실시간 시세</div>\r\n        <CoinList selectedMarketCode={selectedMarketCode} currentPrice={currentPrice} tickPrice={tickPrice}  />\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default CoinListContainer;","import React from 'react';\r\nimport CoinListContainer from './CoinListContainer';\r\n\r\nconst List = ({ selectedMarket, marketSelect }) => {\r\n  const handleClick = (e) => {\r\n    marketSelect(e.target.id);\r\n  }\r\n  return (\r\n    <>\r\n      <div className='type'>\r\n        <div className={`type_list ${selectedMarket === 'KRW' ? 'on' : ''}`}><h3 id='KRW' onClick={handleClick}>원화거래</h3></div>\r\n        <div className={`type_list ${selectedMarket === 'BTC' ? 'on' : ''}`}><h3 id='BTC' onClick={handleClick}>BTC</h3></div>\r\n        <div className={`type_list ${selectedMarket === 'ETH' ? 'on' : ''}`}><h3 id='ETH' onClick={handleClick}>ETH</h3></div>\r\n        <div className={`type_list ${selectedMarket === 'USDT' ? 'on' : ''}`}><h3 id='USDT' onClick={handleClick}>USDT</h3></div>\r\n      </div>\r\n      <div className='Coin_List'>\r\n        <CoinListContainer />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport List from './List';\r\nimport { observer, inject } from 'mobx-react';\r\nimport './ListContainer.css';\r\n\r\nconst ListConatiner = ({ selectedMarket, marketSelect }) => {\r\n  return <List selectedMarket={selectedMarket} marketSelect={marketSelect} />;\r\n};\r\n\r\nexport default inject(({ marketStore }) => ({\r\n  selectedMarket: marketStore.selectedMarket,\r\n  marketSelect: marketStore.marketSelect,\r\n}))(observer(ListConatiner));\r\n","import React, { Component } from 'react';\nimport CoInfoContainer from './components/CoInfoContainer';\nimport ListContainer from './components/ListContainer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return <CoInfoContainer chart={null} list={<ListContainer />} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, flow, configure, action } from 'mobx';\r\nimport axios from 'axios';\r\nimport { MARKET_CODE_URL } from './API_QUERY';\r\n\r\nconfigure({ enforceActions: 'observed' });\r\n\r\nexport default class marketStore {\r\n  constructor(root) {\r\n    this.root = root;\r\n  }\r\n\r\n  // 최초 페이지 로드시 마켓코드 동기화\r\n  @observable isLoadedMarketCode = 'pending';\r\n  @observable krwMarket = [];\r\n  @observable btcMarket = [];\r\n  @observable ethMarket = [];\r\n  @observable usdtMarket = [];\r\n  \r\n  getMarketCode = flow(function*() {\r\n    try {\r\n      const response = yield axios.get(MARKET_CODE_URL);\r\n      const data = response.data;\r\n      this.classify(data);\r\n      yield this.marketSelect('KRW');\r\n      this.isLoadedMarketCode = 'done';\r\n    }\r\n    catch (error) {\r\n      this.isLoadedMarketCode = 'error';\r\n    }\r\n  });\r\n  getMarketCode = this.getMarketCode.bind(this);\r\n\r\n  @action classifyKrw = allMarket => {\r\n    this.krwMarket = allMarket.filter(list => (\r\n      list.market.split('-')[0] === 'KRW'\r\n    ));\r\n  }\r\n  @action classifyBtc = allMarket => {\r\n    this.btcMarket = allMarket.filter(list => (\r\n      list.market.split('-')[0] === 'BTC'\r\n    ));\r\n  }\r\n  @action classifyEth = allMarket => {\r\n    this.ethMarket = allMarket.filter(list => (\r\n      list.market.split('-')[0] === 'ETH'\r\n    ));\r\n  }\r\n  @action classifyUsdt = allMarket => {\r\n    this.usdtMarket = allMarket.filter(list => (\r\n      list.market.split('-')[0] === 'USDT'\r\n    ));\r\n  }\r\n  classify = allMarket => {\r\n    this.classifyKrw(allMarket);\r\n    this.classifyBtc(allMarket);\r\n    this.classifyEth(allMarket);\r\n    this.classifyUsdt(allMarket);\r\n  }\r\n\r\n  // 마켓 탭\r\n  @observable selectedMarket = 'KRW'; // KRW, BTC, ETH, USDT\r\n  @observable selectedMarketCode = [];\r\n  @observable callTickerLink = 'https://api.upbit.com/v1/ticker?markets=';\r\n  @action marketSelect = code => {\r\n    if (code === 'KRW') {\r\n      this.selectedMarket = 'KRW'\r\n      this.selectedMarketCode = this.krwMarket;\r\n    }\r\n    else if (code === 'BTC') {\r\n      this.selectedMarket = 'BTC'\r\n      this.selectedMarketCode = this.btcMarket;\r\n    }\r\n    else if (code === 'ETH') {\r\n      this.selectedMarket = 'ETH'\r\n      this.selectedMarketCode = this.ethMarket;\r\n    }\r\n    else if (code === 'USDT') {\r\n      this.selectedMarket = 'USDT'\r\n      this.selectedMarketCode = this.usdtMarket;\r\n    }\r\n\r\n    this.callTickerLink = 'https://api.upbit.com/v1/ticker?markets=';\r\n\r\n    for (let i = 0; i < this.selectedMarketCode.length; i++) {\r\n      this.callTickerLink = this.callTickerLink + this.selectedMarketCode[i].market + ',';\r\n    }\r\n\r\n    this.callTickerLink = this.callTickerLink.substr(0, this.callTickerLink.length-1);\r\n    this.callCurrentPrice();\r\n  }\r\n\r\n  // 실시간 가격 정보\r\n  @observable currentPrice = [];\r\n  @observable isLoadCurrentPrice = 'pending';\r\n  @observable tickPrice = [];\r\n  callCurrentPrice = flow(function*() {\r\n    this.currentPrice = [];\r\n    this.isLoadCurrentPrice = 'pending';\r\n    try {\r\n      const response = yield axios(this.callTickerLink);\r\n      const data = yield response.data;\r\n      this.currentPrice = data;\r\n      this.tickPrice = this.currentPrice;\r\n      this.isLoadCurrentPrice = 'done';\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.isLoadCurrentPrice = 'error';\r\n    }\r\n  });\r\n  callCurrentPrice = this.callCurrentPrice.bind(this);\r\n\r\n  // 실시간 업데이트\r\n  @action refreshingCurrentPrice = () => {\r\n    if (this.isLoadCurrentPrice === 'done') {\r\n      this.callCurrentPrice();\r\n    }\r\n  }\r\n}\r\n","// 마켓코드\r\nexport const MARKET_CODE_URL = 'https://api.upbit.com/v1/market/all';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport RootStore from '././stores';\n\nconst root = new RootStore();\n\nReactDOM.render(\n    <Provider {...root}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import marketStore from './marketStore';\r\n\r\nclass RootStore {\r\n  constructor() {\r\n    this.marketStore = new marketStore(this);\r\n  }\r\n}\r\n\r\nexport default RootStore;\r\n"],"sourceRoot":""}